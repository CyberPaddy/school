SIMPLE FTP DESIGN BY TEEMU PÃ„TSI

*******************************
STATEFUL / STATELESS
HOW ARE MESSAGES FORMATTED
  - HEADER
  - PAYLOAD
WHAT DIFFERENT KIND OF MESSAGES
SECURITY RELATED THINKING
*******************************

1. INTRODUCTION

  This file transfer protocol design is a stateless command based protocol
  to share certain files from file server to clients.

2. TERMINOLOGY

2.1. DOCUMENT

  CLIENT
    Machine that connects to SERVER.

  FUNCTION
    One REQUEST or RESPONSE. Starts with <COMMAND> and ends with CRLF.

  MUST
    Keyword which implies that something is mandatory and is forced to be implement

  MUST NOT
    Keyword which implies that something is not allowed to do something

  PARAMETER
    <COMMAND> spesific keywords and optional MSG keyword.

  PORT
    TCP port.

  REQUEST
    FUNCTION that asks for certain action.
  
  RESPONSE
    FUNCTION that answers for REQUEST.

  SERVER
    Machine that is actively listening for connections on certain PORT.

  SOCKET
    Two-way connection between two peers on one machine's certain PORT.
    Both peers MUST be able to send and receive data to each other.

  SYNTAX
    The order of operations for FUNCTION.

2.2. SYNTAX SPECIFIC TERMINOLOGY

  CRLF
    Carriage return (ASCII 13) + Line feed (ASCII 10)

  SP
    Space (ASCII 32)
  
  <COMMAND>
    The command in REQUEST or RESPONSE. All commands are listed at 4.1. and 4.2.

  <DATA>
    Filename(s) for LIST <FUNCTION>, file content for FILE <FUNCTION>

  <DATA_SIZE>
    The amount of bytes in <DATA>.

  <COMMAND_PARAM>
    <COMMAND> related PARAMETER, for example the filename for DOWNLOAD.

  [] (SQUARE BRACKETS)
    Optional parts of the SYNTAX. Everything inside [] MUST be in the FUNCTION if some of it is.
    
3. ESTABLISHING CONNECTIONS

  Connection MUST be formed via TCP SOCKET. server has to already listen to certain port.

4. DATA TRANSFER FUNCTIONS

  SYNTAX
    <COMMAND>[SP<COMMAND_PARAM>[;<DATA_SIZE>;<DATA>]];CRLF

4.1. REQUEST <COMMAND>

  LIST
    List filenames of the files available on the server.

  DOWNLOAD
    Downloads a file. A filename has to be provided.

4.2. RESPONSE <COMMAND>

  ERROR
    Tells the client that the request could not be processed.
    Different error messages are listed at 5.1.

  FILE
    Returns the data to the client.

  LS
    Returns list of filenames separated by SP

4.3. EXAMPLES

4.3.1. SUCCESSFUL FILE DOWNLOAD

  REQUEST
    DOWNLOAD file.txt;

  RESPONSE
    FILE file.txt;<DATA_SIZE>;<DATA>;CRLF

4.3.2. LIST ALL FILES ON THE SERVER
  
  REQUEST
    LIST;

  RESPONSE
    LS test.txt cat.png bull.zip

4.3.3. FILE NOT FOUND

  REQUEST
    DOWNLOAD pork.zip;

  RESPONSE
    ERROR 404;

5. PROTOCOL STATES

5.1. SERVER

6. ERROR CONDITIONS

  Error MUST be raised if requested FUNCTION cannot be finished
  or requested data is not found or available for the requester.
  
6.1. ERROR MESSAGES

  ERROR 403
    Unauthorized.

  ERROR 404
    File not found.

  ERROR 500
    <COMMAND> unrecognized.

  ERROR 501
    SYNTAX error.
