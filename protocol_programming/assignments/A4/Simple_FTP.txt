SIMPLE FTP DESIGN BY TEEMU PÃ„TSI

1. INTRODUCTION

  This file transfer protocol design is a stateless command based protocol to share certain files from file SERVER to CLIENTs.

2. TERMINOLOGY

2.1. DOCUMENT

  BIG-ENDIAN
    Bytes SHOULD be ordered so that the most significant bytes are sent first.

  CLIENT
    Machine that connects to SERVER.

  DOCUMENT ROOT
    The directory that is used to store files which can be downloaded by CLIENTs. Downloading from it's parent folders
    MUST NOT be permitted. CLIENTs SHOUD be able to download from the child folders of the DOCUMENT ROOT by inserting
    the relative file path from DOCUMENT ROOT to the wanted resource. The folders SHOULD be separated with forward slashes.

  FUNCTION
    One REQUEST or RESPONSE. Starts with <COMMAND> and ends with CRLF.

  MUST
    Keyword which implies that something is mandatory and is forced to be implement

  MUST NOT
    Keyword which implies that something is not allowed to do something

  PARAMETER
    <COMMAND> spesific keywords and optional MSG keyword.

  PORT
    TCP port.

  REQUEST
    FUNCTION that asks for certain action.
  
  RESPONSE
    FUNCTION that answers for REQUEST.

  SERVER
    Machine that is actively listening for connections on certain PORT.

  SHOULD
    Recommended but not mandatory

  SOCKET
    Two-way connection between two peers on one machine's certain PORT.
    Both peers MUST be able to send and receive data to each other.

  SYNTAX
    The order of operations for FUNCTION.

2.2. SYNTAX SPECIFIC TERMINOLOGY

  CRLF
    Carriage return (ASCII 13) + Line feed (ASCII 10)

  SP
    Space (ASCII 32). Filename MUST NOT contain SP.
  
  <COMMAND>
    The command in REQUEST or RESPONSE. All commands are listed at 4.1. and 4.2.

  <COMMAND_PARAMS>
    <COMMAND> related PARAMETERs, for example the filename for DOWNLOAD or filenames for LS.

  <DATA>
    Filename(s) for LIST <FUNCTION>, file content for FILE <FUNCTION>

  <DATA_SIZE>
    The amount of bytes in <DATA>.

  <SEQ_BYTES>
    Two-byte ID for the REQUEST or its corresponding RESPONSE. If client resends REQUEST to SERVER, <SEQ_BYTES> should be the same.
    The first REQUEST of the connection SHOULD be valued 0000. Every new REQUEST during the connection should add one to the <SEQ_BYTES>.

  [] (SQUARE BRACKETS)
    Optional parts of the SYNTAX. Everything inside [] MUST be in the FUNCTION if some of it is.

  ; (SEMICOLON)
    Separator character for <COMMAND_PARAMS>, <DATA_SIZE>, <DATA> and CRLF. Filename MUST NOT contain SEMICOLON.

  b''
    Byte value. For example b'0x0010'.
    
3. ESTABLISHING CONNECTIONS

  Connection MUST be formed via TCP SOCKET. Server has to already listen to certain port for which the clients connects to.
  SOCKET MUST be terminated after server has sent the RESPONSE. Server SHOULD continue listening to the same port after RESPONSE.

  Server SHOULD log or print error message when connection is terminated prematurely.
  Server SHOULD NOT print any error message if the REQUEST sent by client was answered with proper RESPONSE.

4. DATA TRANSFER FUNCTIONS

  Data transfer FUNCTIONs MUST be in text form encoded with UTF-8.

  SYNTAX
    <COMMAND>[SP<COMMAND_PARAMS>[;<DATA_SIZE>;<DATA>]];CRLF<SEQ_BYTES>

4.1. REQUEST <COMMAND>

  LIST
    List filenames of the files available on the server.

  DOWNLOAD
    Downloads one file. A filename has to be provided.

  QUIT
    Terminates SOCKET if file transfer is not in progress. If transfer is in progress, the connection should remain established
    until file transfer is completed.

4.2. RESPONSE <COMMAND>

  ACK
    Sign of acknowledge. When REQUEST is received, SERVER MUST immiediately respond with ERROR or ACK.
    SERVER MUST respond "ACK <SEQ_BYTES> 102;CRLF" if file transfer is in progress when QUIT command is received.
    Else if everything is fine in REQUEST SERVER MUST send "ACK <SEQ_BYTES> 200;CRLF" before sending RESPONSE.
    If CLIENT does not receive ACK command, it SHOULD send the same message again with same <SEQ_BYTES>.

  ERROR
    When REQUEST is received, SERVER MUST immiediately respond with ERROR or ACK.
    ERROR command Tells the client that the request could not be processed. Different error messages are listed at 5.1.

  FILE
    Returns the data to the client.

  LS
    Returns list of filenames separated by SP.

4.3. EXAMPLES

4.3.1. SUCCESSFUL FILE DOWNLOAD

  REQUEST
    DOWNLOAD file.txt;CRLFb'0x0001'

  RESPONSEs
    ACK 200;CRLFb'0x0001'
    FILE file.txt;<DATA_SIZE>;<DATA>;CRLFb'0x0001'

4.3.2. LIST ALL FILES ON THE SERVER
  
  REQUEST
    LIST;CRLFb'0x0002'

  RESPONSE
    ACK 200;CRLFb'0x0002'
    LS test.txt cat.png bull.zip;CRLFb'0x0002'

4.3.3. FILE NOT FOUND

  REQUEST
    DOWNLOAD pork.zip;CRLFb'0x0003'

  RESPONSE
    ERROR 404;CRLFb'0x0003'

5. ERROR CONDITIONS

  Error MUST be raised if requested FUNCTION cannot be finished
  or requested data is not found or available for the requester.
  
5.1. ERROR MESSAGES

  ERROR 403
    Unauthorized.

  ERROR 404
    File not found.

  ERROR 500
    <COMMAND> unrecognized.

  ERROR 501
    SYNTAX error.

5.2. CONNECTION TERMINATES UNEXPECTED

  Error message SHOULD be logged or printed if SOCKET terminates unexpected. This applies to both CLIENT and SERVER.
  If connection to CLIENT terminates, the SERVER SHOULD continue listening to new connections.

6. DATA TRANSFER SPECIFICATIONS

6.1. DATA TYPES

  All FUNCTIONs MUST be sent encoded as UTF-8 strings except for <SEQ_BYTES> which MUST be two byte value and <DATA_SIZE> which MUST be four byte value.
  The exception is FILE command, which MUST return <DATA> in bytes. The maximum size of <DATA> SHOULD be 4294967295 (unsigned 4 byte integer).

6.2. BYTE ORDER

  All data sent via SOCKET MUST use BIG-ENDIAN byte order.

7. SECURITY

  This protocol SHOULD NOT be used to transfer confidential data. The file contents are sent unencrypted through SOCKET.
  The SERVER SHOULD specify file path which acts as the DOCUMENT ROOT. CLIENT MUST NOT be able to request data from the SERVER's DOCUMENT ROOT's parent folders.
